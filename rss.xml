<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Insanehong's Incorrect Note]]></title><description><![CDATA[Insanehong's Incorrect Note is designed to help people of web developer,designer, publisher and early beginnn er who are studying Front-end Technology for the development of web application.]]></description><link>http://insanehong.kr</link><image><url>http://insanehong.kr/public/img/favorite.png</url><title>Insanehong&apos;s Incorrect Note</title><link>http://insanehong.kr</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 26 Jun 2014 23:58:51 GMT</lastBuildDate><atom:link href="http://insanehong.kr/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[local 저장소에 새로운 commit 하기 ]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h2 id="toc_115">들어가기 앞서</h2>
<p>이글은 <a href="http://insanehong.kr/post/create-repository/">Local에 git 저장소 만들기</a> 에 이어 작성 된 글이다. 이 글에서 git 의 commit 과 push command 를 이용해서 local 의 변경내용을 원격저장소에 올리는 작업을 진행 할 예정이다. 추가적으로 git 이 파일을 어떻게 관리하는지 약간의 개념정리도 포함되어 있다. </p>
<blockquote>
<p>사용법을 익히는 것이 우선이라 생각하면 개념부분은 스킵해도 무관하다. </p></blockquote>

<h2 id="toc_116">git 의 작업공간</h2>
<p>이전 글을 통해서 local git 저장소를 만들었다. 그럼 이제부터 git 이 파일을 어떻게 관리하는가를 알아보도록 한다. </p><p>git 저장소으 파일은 상태별로 아래와 같이 구분 되어 진다. </p>]]></description><link>http://insanehong.kr/post/git-commit-push</link><guid isPermaLink="false">git-commit-push</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Tue, 13 May 2014 13:05:00 GMT</pubDate></item><item><title><![CDATA[Local에 git 저장소 만들기]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h2 id="toc_33">들어가기 앞서</h2>
<p>이글은 <a href="http://insanehong.kr/post/create-new-repository-on-git/">Yobi 에서 새로운 프로젝트 시작하기</a> 에서 만든 저장소를 기초로 진행할 예정이며
<code>git</code> CLI(Command Line Interface) 를 기반으로 <code>git</code> 의 기본적인 명령어를 익히는 것을 목적으로 하고 있다. </p><p>git 이 설치 되지 않았다면 다음의 글들을 참고하여 <code>git</code> 을 설치 후 config 설정을 하길 바란다. </p>
<ul>
<li>mac os : <a href="http://www.hongkiat.com/blog/mountain-lion-git-fix/">Git “Command Not Found” Error In Mountain Lion</a></li>
<li>windows os : <a href="http://insanehong.kr/post/guide-to-git-for-windows/">윈도우 사용자를 위한 git client 설치</a></li>
</ul>

<h2 id="toc_34">왜 GUI가 아닌 CLI 를 사용하는가?</h2>
<p>윈도우 사용자에게는 CLI 가 참 낮설고 불편해 보일 것이다. 조금 과장해서 마우스 클릭만으로 냉장고가 집에 배달되는 세상에 키보드로 명령어를 입력해야 한다니 말이다. </p>]]></description><link>http://insanehong.kr/post/create-repository</link><guid isPermaLink="false">create-repository</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Mon, 12 May 2014 09:47:00 GMT</pubDate></item><item><title><![CDATA[Yobi 에서 새로운 프로젝트 시작하기]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h2 id="toc_25">들어가기 앞서</h2>
<p>이 글은 프로젝트관리 경험이 전혀없거나 소프트웨어 개발에 입문하고자 하는 분들이 Yobi 를 사용하는데 필요한 가이드를 위해 작성 되었습니다. </p><p>이미 현업에서 프로젝트 관리 기법등을 잘 익혀 오셨거나 특히 Git 과 Github 등을 익숙하게 사용하고 계신분들에게는 도움이 되지 않을수 있음을 먼저 알려드립니다. </p><p>또한 지금 기본적으로 Yobi와 Git 이 설치 되어 있어 언제든 프로젝트를 시작 할수 있다는 가정을 하고 시작합니다. </p>
<h2 id="toc_26">Yobi 에서 새 프로젝트 시작하기</h2>
]]></description><link>http://insanehong.kr/post/create-new-repository-on-git</link><guid isPermaLink="false">create-new-repository-on-git</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Sat, 10 May 2014 17:58:00 GMT</pubDate></item><item><title><![CDATA[git으로 디버깅하기]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_42">git 으로 Debuging 하기</h1>
<p>보통 프로젝트를 진행하다가 버그를 발견하고 이 부분이 언제 어떤 커밋으로 인하여 발생하였는지 알고 싶은 경우가 있다. </p><p>어떤 코드로 인하여 발생한 문제인지를 정확히 집어야 해당 문제를 해결하는데 수월할 뿐만아니라 변경된 시점을 알게되면  언제부터 문제가 발생하였는지 정확히 트레킹 할수 있기 때문이다. </p><p>하지만 프로젝트의 모든 커밋 히스토리를 하나하나 뒤져가며 복구하고 실행해보고 재현이 되는가를 테스트하는 것은 거의 불가능한 일이다. </p><p>하지만 <em class="label label-success"><strong>git</strong></em> 을 이용하면 약 5분도 안되는 시간이내에 어떤 커밋으로 인하여 문제가 되었는지 쉽게 찾을 수 있다. </p>]]></description><link>http://insanehong.kr/post/debuging-with-git</link><guid isPermaLink="false">debuging-with-git</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Fri, 18 Oct 2013 00:01:00 GMT</pubDate></item><item><title><![CDATA[deview2013 -  2일간의 행적들]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><blockquote>
<p>이 글에 실린 Deview 2012에 관련된 모든 사진은 별도의 저작권자가 명시되지 않은 경우 <a href="https://www.facebook.com/deviewcon">Deview공식 페이스북</a>에 기제된 사진을 사용했음을 먼저 밝힌다. </p></blockquote>
<p>이 글은 <em class="label label-success"><strong>Deview 2013</strong></em> 에 참가자이면서 스텝으로 참가하게된 2일간의 개인적인 행적을 기록으로 남기기 위한 것입니다. </p>
<blockquote>
<p>극히 개인적인 생각과 감흥이 여기저기 묻어 있으며 세션에 대한 내용은 거의 없는 관계로 구독을 권고하지 않습니다. </p></blockquote>
<p>라고 미리 약을 팔아 봅니다.</p><p><img src="/post/deview2013/@img/Deview2013.jpg" alt="deview2013"></p>]]></description><link>http://insanehong.kr/post/deview2013</link><guid isPermaLink="false">deview2013</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Wed, 16 Oct 2013 11:33:00 GMT</pubDate></item></channel></rss>