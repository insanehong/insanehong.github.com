<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Insanehong's Incorrect Note]]></title><description><![CDATA[Insanehong's Incorrect Note is designed to help people of web developer,designer, publisher and early beginnn er who are studying Front-end Technology for the development of web application.]]></description><link>http://insanehong.kr</link><image><url>http://insanehong.kr/public/img/favorite.png</url><title>Insanehong&apos;s Incorrect Note</title><link>http://insanehong.kr</link></image><generator>RSS for Node</generator><lastBuildDate>Sat, 23 Nov 2013 02:29:36 GMT</lastBuildDate><atom:link href="http://insanehong.kr/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[git으로 디버깅하기]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_26">git 으로 Debuging 하기</h1>
<p>보통 프로젝트를 진행하다가 버그를 발견하고 이 부분이 언제 어떤 커밋으로 인하여 발생하였는지 알고 싶은 경우가 있다. </p><p>어떤 코드로 인하여 발생한 문제인지를 정확히 집어야 해당 문제를 해결하는데 수월할 뿐만아니라 변경된 시점을 알게되면  언제부터 문제가 발생하였는지 정확히 트레킹 할수 있기 때문이다. </p><p>하지만 프로젝트의 모든 커밋 히스토리를 하나하나 뒤져가며 복구하고 실행해보고 재현이 되는가를 테스트하는 것은 거의 불가능한 일이다. </p><p>하지만 <em class="label label-success"><strong>git</strong></em> 을 이용하면 약 5분도 안되는 시간이내에 어떤 커밋으로 인하여 문제가 되었는지 쉽게 찾을 수 있다. </p>]]></description><link>http://insanehong.kr/post/debuging-with-git</link><guid isPermaLink="false">debuging-with-git</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Fri, 18 Oct 2013 00:01:00 GMT</pubDate></item><item><title><![CDATA[deview2013 -  2일간의 행적들]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><blockquote>
<p>이 글에 실린 Deview 2012에 관련된 모든 사진은 별도의 저작권자가 명시되지 않은 경우 <a href="https://www.facebook.com/deviewcon">Deview공식 페이스북</a>에 기제된 사진을 사용했음을 먼저 밝힌다. </p></blockquote>
<p>이 글은 <em class="label label-success"><strong>Deview 2013</strong></em> 에 참가자이면서 스텝으로 참가하게된 2일간의 개인적인 행적을 기록으로 남기기 위한 것입니다. </p>
<blockquote>
<p>극히 개인적인 생각과 감흥이 여기저기 묻어 있으며 세션에 대한 내용은 거의 없는 관계로 구독을 권고하지 않습니다. </p></blockquote>
<p>라고 미리 약을 팔아 봅니다.</p><p><img src="/post/deview2013/@img/Deview2013.jpg" alt="deview2013"></p>]]></description><link>http://insanehong.kr/post/deview2013</link><guid isPermaLink="false">deview2013</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Wed, 16 Oct 2013 11:33:00 GMT</pubDate></item><item><title><![CDATA[FRENDS Meetup 행사를 마치고]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h2 id="toc_41">FRENDS Meetup</h2>

<blockquote>
<p>이제 올해도 정식모임을 5번 했습니다. 이제 7번 남았네요. 5번 모일동안 나왔던 거 추스려서.. 소규모 Meetup을 한번 하면 어떨까요?</p></blockquote>
<p>5월 어느날 FRENDS group 에 올라온 하나의 글로 시작된 <code>FRENDS Meetup</code> 행사가 나름 성공적으로 끝이 났다.</p><p>한달여간 다함께 준비하고 노력한 결과로 95%가 넘는 참석률과 <code>NHN</code>의 지원으로 말미암아 비용걱정 없이 잘 치루어 낸거 갔다.</p><p><img src="/post/frends-meetup/@img/frends1.jpg" alt="첫번째 발표"></p>]]></description><link>http://insanehong.kr/post/frends-meetup</link><guid isPermaLink="false">frends-meetup</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Sun, 15 Sep 2013 05:41:00 GMT</pubDate></item><item><title><![CDATA[.gitignore file generator gig 소개]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_94">.gitignore file generator gig</h1>
<p>최근들어 잉여력이 폭팔하고 있는 관계로 무엇인가 생산적인 일을 해보려고 찾아해매던 중 항상 <a href="http://gitignore.io">gitignore.io</a> 의 도움을 받아 생성해 오던 <code>.gitignore</code>  파일을 오프라인에서도 쉽게 사용할 수 있는 <em class="label label-important"><strong>CLI Command set</strong></em>으로 만들어 보자 라는 참 잉여스런 생각을 하게 되었다. </p>
<blockquote>
<p><a href="http://gitignore.io">gitignore.io</a> 에서도 CLI 로 사용가능한 방법을 지원하지만 이역시 RESTfull API 를 이용하는 방식이라 오프라인에서는 사용할 수 없다</p></blockquote>

<h2 id="toc_95">gig</h2>
<p><em class="label label-info"><strong>gig</strong></em>는  <a href="http://github.com/github/gitignore">gitignore template</a> 를 사용한 node.js 기반의  <code>.gitignore</code> file generator 이다. </p>]]></description><link>http://insanehong.kr/post/gitignore-generator-gig</link><guid isPermaLink="false">gitignore-generator-gig</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Wed, 05 Jun 2013 15:58:00 GMT</pubDate></item><item><title><![CDATA[윈도우 사용자를 위한 git client 설치]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/5e9df4b6c732d16a3b41d11d7288e195?r=pg&s=48.jpg&d=identicon"><br/><h1 id="toc_137">Guide to Git for Windows</h1>
<p>이 글은 팀내 <em class="label label-info"><strong>Windows OS</strong></em> 사용자를 위하여 Git 설치 및 업무환경 세팅에 대하여 사내 위키 문서에 정리해 놓은 내용을 옮겨온 것입니다. </p><p><em class="label label-info"><strong>Windows 7</strong></em> 을 기준으로 작성 되었으며 GUI 특히 <em class="label label-info"><strong>tortoiseSVN</strong></em> 에 익숙한 사용자 경험을 원하는 분들을 위하여<br>
<em class="label label-important"><strong>TortoiseGit</strong></em> 의 설치와 <em class="label label-important"><strong>CLI</strong></em>를 사용하기 원하는 분들을 위한 <em class="label label-info"><strong>mysysgit</strong></em>의 설치 과정을 담고 있습니다.</p>
<h2 id="toc_138">TortoiseGit 설치하기</h2>

<ul>
<li><a href="https://code.google.com/p/tortoisegit/wiki/Download?tm=2">다운로드</a></li>
</ul>

<h3 id="toc_139">1. 다운로드 페이지 본인 컴퓨터에 맞는 설치 파일을 다운로드 받습니다.</h3>
<p><img src="/post/guide-to-git-for-windows/@img/tor1.jpg" alt="TortoiseGit 다운로드 페이지"></p>]]></description><link>http://insanehong.kr/post/guide-to-git-for-windows</link><guid isPermaLink="false">guide-to-git-for-windows</guid><dc:creator><![CDATA[<a href="insanehong" target="_blank">Insanehong</a>]]></dc:creator><pubDate>Tue, 28 May 2013 02:56:00 GMT</pubDate></item></channel></rss>